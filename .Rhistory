library(vetnet)
vetnet::hello()
library(vetnet)
?vetnet
make_par_lists = function(num_subjects,par_names,lower,upper){
x = NULL
for(i in 1:length(par_names)){
y = runif(num_subjects,lower,upper)
x = cbind(x,data.frame(par_names[i]=y))
}
return(x)
}
make_par_lists = function(num_subjects,par_names,lower,upper){
x = NULL
for(i in 1:length(par_names)){
y = runif(num_subjects,lower,upper)
x = cbind(x,data.frame(par_names[i]=y))
}
return(x)
}
make_par_lists = function(num_subjects,par_names,lower,upper){
x = NULL
for(i in 1:length(par_names)){
y = runif(num_subjects,lower,upper)
x = cbind(x,data.frame(par_names[i]=y))
}
return(x)
}
make_par_lists = function(num_subjects,par_names,lower,upper){
}
for(i in 1:length(par_names)){
y = runif(num_subjects,lower,upper)
x = cbind(x,data.frame(par_names[i]=y))
}
x = NULL
y = runif(num_subjects,lower,upper)
make_par_lists = function(num_subjects,par_names,lower,upper){
x = NULL
for(i in 1:length(par_names)){
y = runif(num_subjects,lower,upper)
x = cbind(x,data.frame(par_names[i]=y))
}
return(x)
}
model = function(d,pars) {
c = pars$c
beta = pars$beta
p = sapply(d, function(d) exp(-c*d) / (exp(-c*d) + beta))
p = p[1] / sum(p) #probability of picking target
}
make_par_lists = function(num_subjects,par_names,lower,upper){
x = NULL
for(i in 1:length(par_names)){
y = runif(num_subjects,lower,upper)
x = cbind(x,data.frame(par_names[i]=y))
}
return(x)
}
make_par_lists = function(num_subjects,par_names,lower,upper){
}
make_par_lists = function(num_subjects,par_names,lower,upper){
print('hello')
}
make_par_lists = function(num_subjects,par_names,lower,upper){
x = NULL
for(i in 1:length(par_names)){
y = runif(num_subjects,lower,upper)
x = cbind(x,data.frame(par_names[i]=y))
}
return(x)
}
make_par_lists = function(num_subjects,par_names,lower,upper){
x = NULL
for(i in 1:length(par_names)){
y = runif(num_subjects,lower,upper)
#x = cbind(x,data.frame(par_names[i]=y))
}
return(x)
}
make_par_lists = function(num_subjects,par_names,lower,upper){
x = NULL
for(i in 1:length(par_names)){
y = runif(num_subjects,lower,upper)
x = cbind(x,x)
}
return(x)
}
make_par_lists = function(num_subjects,par_names,lower,upper){
x = NULL
for(i in 1:length(par_names)){
y = runif(num_subjects,lower[i],upper[i])
x = cbind(x,y)
}
x = as.data.frame(x)
names(x) = par_names
return(x)
}
make_par_lists(10,c('c','beta'),c(0,0),c(1,1))
########## Parameters ############
wd = 'C:/Users/Jeffrey/Dropbox/backup/Research Projects/mds_3M_v2/vet'
vet_test_file = 'data/test_list/preprocessed/vet_1.0_list.RData'
dst_file = 'data/rdm/dst_vgg-16.RData'
model_file = 'models/model_1/model_1.RData'
###################################
#set working directory
setwd(wd)
###load in distance matrix and test list
dst = load_file(dst_file)
vet = load_file(vet_test_file)
load_file = function(file_name){
load(file_name)
obj_names = ls()
obj_names = obj_names[obj_names != 'file_name']
if(length(obj_names) > 1){
#return a list of objects
dat = sapply(obj_names, function(x)get(x), simplify=FALSE, USE.NAMES=TRUE)
}else{
#return a single object
dat = get(obj_names)
}
return(dat)
}
########## Parameters ############
wd = 'C:/Users/Jeffrey/Dropbox/backup/Research Projects/mds_3M_v2/vet'
vet_test_file = 'data/test_list/preprocessed/vet_1.0_list.RData'
dst_file = 'data/rdm/dst_vgg-16.RData'
model_file = 'models/model_1/model_1.RData'
###################################
#set working directory
setwd(wd)
###load in distance matrix and test list
dst = load_file(dst_file)
vet = load_file(vet_test_file)
source('C:/Users/Jeffrey/Dropbox/backup/Research Projects/palmeri-vetnet/vet/r/vet_cnn.R', echo=TRUE)
library(vetnet)
devtools::document()
install.packages('digest')
devtools::document()
library(vetnet)
?vetnet
??vetnet
library(vetnet)
devtools::document()
library(vetnet)
##################################################
## Script purpose: Run VET using network distances
## Date: 6/26/18
## Author: Jeffrey Annis
## Inputs:
##   wd: working directory
##   vet_test_file: the VET 1.0 test list
##   dst_file: a distance matrix
##   model_file: a cognitive model, outputs p(target) for each trial
## Outputs: A correlation matrix, cor_mat
##################################################
rm(list=ls())
load_file = function(file_name){
load(file_name)
obj_names = ls()
obj_names = obj_names[obj_names != 'file_name']
if(length(obj_names) > 1){
#return a list of objects
dat = sapply(obj_names, function(x)get(x), simplify=FALSE, USE.NAMES=TRUE)
}else{
#return a single object
dat = get(obj_names)
}
return(dat)
}
get_choice_prob = function(study_list, probes, dst, model, pars){
d = NA
study_list_idx = sapply(1:length(study_list),function(x) which(colnames(dst)==study_list[x]))
probe_list_idx = sapply(1:length(probes), function(x) which(colnames(dst)==probes[x]))
for(i in 1:length(probes)){
d[i] = sum(sapply(1:length(study_list_idx), function(x) dst[probe_list_idx[i],study_list_idx[x]]))
}
p = model(d,pars)
return(p)
}
get_cor_mat = function(response_lists){
response_lists = Map(cbind,response_lists,subject = 1:length(response_lists))
response_df = do.call(rbind,response_lists)
agg_response = aggregate(accuracy ~ subject * categories, response_df, mean)
agg_response_mat = dcast(data = agg_response,value.var = 'accuracy',formula = subject ~ categories)
agg_response_mat = na.omit(agg_response_mat)
cor_mat = cor(agg_response_mat[2:ncol(agg_response_mat)],agg_response_mat[2:ncol(agg_response_mat)])
return(cor_mat)
}
get_list = function(vet, dst, model, pars){
response_list = list()
study_lists = vet$study
probe_lists = vet$probe
for(i in 1:length(study_lists)){
response_list[[i]] = sapply(1:nrow(probe_lists[[i]]), function(x) get_choice_prob(study_lists[[i]],probe_lists[[i]][x,],dst,model,pars))
}
categories = names(study_lists)
response_list = Map(cbind,accuracy=response_list,categories=categories)
response_df = data.frame(do.call(rbind,response_list))
response_df$accuracy = as.numeric(as.character(response_df$accuracy))
return(response_df)
}
run_vet = function(vet, dst, model, par){
if(is.matrix(dst)){ #if we are running a single distance matrix
if(nrow(par)==1){ #if we are running a single parameter set
response_lists = get_list(vet, dst, model, par)
}else{ #if we are running multiple parameters with single distance matrix
response_lists = llply(1:nrow(par),function(x) get_list(vet, dst, model, par[x,]), .progress = 'win')
}
}else{ #if we are running multiple distance matrices
if(nrow(par)==1){ #if we are running a single parameter set
response_lists = llply(1:length(dst),function(x) get_list(vet, dst[[x]], model, par), .progress = 'win')
}else{ #if we are running multiple parameters with multiple distance matrices
response_lists = llply(1:num_subjects,function(x) get_list(vet, dst[[x]], model, par[x,]), .progress = 'win')
}
}
return(response_lists)
}
make_parameter_list = function(num_subjects,par_names,lower,upper){
x = NULL
for(i in 1:length(par_names)){
y = runif(num_subjects,lower[i],upper[i])
x = cbind(x,y)
}
x = as.data.frame(x)
names(x) = par_names
return(x)
}
#load packages
library(plyr)
library(reshape2)
library(msm)
library(corrplot)
########## Parameters ############
wd = 'C:/Users/Jeffrey/Dropbox/backup/Research Projects/mds_3M_v2/vet'
vet_test_file = 'data/test_list/preprocessed/vet_1.0_list.RData'
dst_file = 'data/rdm/dst_vgg-16.RData'
num_subjects = 10
###################################
#set working directory
setwd(wd)
###load in distance matrix and test list
dst = load_file(dst_file)
vet = load_file(vet_test_file)
vet$study
devtools::document()
library(vetnet)
devtools::document()
install.packages('root')
devtools::document()
library(vetnet)
devtools::document()
library(vetnet)
devtools::document()
library(vetnet)
devtools::document()
library(vetnet)
library(vetnet)
devtools::document()
library(vetnet)
devtools::document()
library(vetnet)
par_list = make_parameter_list(num_subjects=10,par_names=c('c','beta'),lower=c(0,0),upper=c(1,1))
par_list
devtools::document()
library(vetnet)
devtools::document()
library(vetnet)
devtools::document()
library(vetnet)
devtools::document()
library(vetnet)
devtools::document()
library(vetnet)
devtools::document()
library(vetnet)
library(vetnet)
system.file('extdata','vet_1.0_test_list.csv',package='vetnet')
make_vet_list = function(vet_test_file){
vet_test = read.csv(vet_test_file,sep = '\t')
#do some preprocessing on the matrix and the test list
#dst = dst / max(dst) #normalize distances
vet_test = vet_test[vet_test$TrialType != 'Study',]
vet_test$TargetName = gsub(pattern = ' ', replacement = '', x = as.character(vet_test$TargetName))
vet_test$Distractor1Name = gsub(pattern = ' ', replacement = '', x = as.character(vet_test$Distractor1Name))
vet_test$Distractor2Name = gsub(pattern = ' ', replacement = '', x = as.character(vet_test$Distractor2Name))
#make some data structures that will be helpful for making the final data structures
categories = as.character(unique(vet_test$Category))
probes = cbind(vet_test$TargetName,vet_test$Distractor1Name,vet_test$Distractor2Name)
######### these data structures are inputs to the main function, get_list()
probe_lists = lapply(1:length(categories),function(x) probes[vet_test$Category == categories[[x]],])
study_lists = lapply(1:length(categories),function(x) vet_test$TargetName[vet_test$Category == categories[[x]]][1:6])
categories = unlist(lapply(categories,function(x) gsub(pattern = ' ', replacement = '', x = x)))
names(probe_lists) = categories
names(study_lists) = categories
vet_list = list(probe = probe_lists, study=study_lists)
return(vet_list)
}
make_vet_list(system.file('extdata','vet_1.0_test_list.csv',package='vetnet'))
devtools::document()
library(vetnet)
devtools::document()
library(vetnet)
library(vetnet)
devtools::document()
devtools::document()
library(vetnet)
library(vetnet)
dst
?vetnet::dst
library(vetnet)
?vetnet::dst
library(vetnet)
devtools::document()
devtools::document()
library(vetnet)
nrow(dst)
vet_list$probe[[1]]
length(vet_list$study)
head(vet_list$probe[[1]])
class(vet_list$probe[[1]])
devtools::document()
library(vetnet)
devtools::use_vignette("my-vignette")
library(vetnet)
devtools::document()
library(vetnet)
library(vetnet)
devtools:document()
devtools::document()
library(vetnet)
library(vetnet)
devtools::document()
library(vetnet)
devtools::document()
library(vetnet)
devtools::document()
library(vetnet)
2633/7
2633/7/4
library(vetnet)
devtools::document()
install.packages('qpdf')
library(vetnet)
devtools::document()
library(vetnet)
devtools::use_readme_rmd()
devtools::intall_github('jeff324/vetnet')
devtools::install_github('jeff324/vetnet')
devtools::intall_github('chenchals/vetnet')
devtools::install_github('chenchals/vetnet')
devtools::install_github('chenchals/vet/vetnet')
devtools::install_github('chenchals/palmeri-vet/vet/vetnet')
devtools::install_github('chenchals/palmeri-vetnet/vet/vetnet')
devtools::install_github('chenchals/palmeri-vetnet/vet/vetnet',ref='develop')
devtools::install_github('chenchals/palmeri-vetnet',ref='develop',subdir ='vet/vetnet')
devtools::install_github('chenchals/palmeri-vetnet',ref='develop',subdir ='/vet/vetnet')
devtools::install_github('chenchals/palmeri-vetnet/',ref='develop',subdir ='vet/vetnet')
devtools::install_github('chenchals/palmeri-vetnet',ref='develop',subdir ='vet')
devtools::install_github('chenchals/palmeri-vetnet',ref='develop',subdir ='vet/vetnet')
GITHUB_PAT = 'f300b3f62f6cdd38c6e437372f817a6fac6c25e9'
devtools::install_github('chenchals/palmeri-vetnet', ref = 'develop',
subdir = 'vet/vetnet', auth_token = GITHUB_PAT)
library(vetnet_
library(vetnet)
library(vetnet)
Sys.getenv(x = 'GITHUB_PAT')
Sys.getenv(x = NULL)
Sys.getenv(x = 'GITHUB_PAT')
Sys.getenv(x = NULL)
Sys.getenv(x = NULL)
Sys.getenv(x = NULL)
Sys.getenv(x = NULL)
library(vetnet)
library(vetnet)
library(vetnet)
devtools::use_build_ignore('check_github_install.R')_
devtools::use_build_ignore('check_github_install.R')
devtools::use_build_ignore('R/check_github_install.R')
library(vetnet)
library(vetnet)
?vetnet
help(vetnet)
help('vetnet')
help(package='vetnet')
